#!/usr/bin/perl
use lib "../lib";
use BuildHosts;
use Getopt::Long;
use Carp;
use Parse;
my @nodes;
my ($cliDir, $profile, $verbose, $loglevel, $node, $password, $user, $propertiesDir, $stdOut);
my $destDir=undef;
$verbose = 0;
$stdOut = 0;
$usage=undef;
my $DefaultParamsFile = "../etc/system.defaults";

####################################### Subroutines #######################################
sub GetDefaults
{
	open SD, "<$DefaultParamsFile" or carp "Unable to open Default params file :$DefaultParamsFile";
	while (<SD>)
	{
		my $tmp;
		chomp;
		next if m/^$/ or m/^#/;
		($tmp,$cliDir) = split(/=/, $_) if m/cliDir/i;
		($tmp,$propertiesDir) = split(/=/, $_) if m/propertiesDir/i;
		($tmp,$profile) = split(/=/, $_) if m/profile/i;
		($tmp,$verbose) = split(/=/, $_) if m/verbose/i;
		($tmp,$loglevel) = split(/=/, $_) if m/loglevel/i;
		($tmp,$password) = split(/=/, $_) if m/password|passwd/i;
		($tmp,$user) = split(/=/, $_) if m/user/i;
	}
}

sub is_valid {
	my $IP=shift;
        chomp $IP;
        $IP=~s/\s+//g;
        return 1 if(($IP=~/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/) && ($1<=255) && ($2<=255) && ($3<=255) && ($4<=255));
        return undef;
}

sub usage {
        print <<EOF

Usage:

Provide in the following options.



--profile          (Mandatory)		=> Name of the Distribution/Data centre directory under base directory containing .prop files, defaults to the 
					   one specified in "system.defaults".

--node             (Mandatory)		=> Node IP address, if want to create a .cli file for one node contained in Distribution/Data centre directory.

--verbose				=> Enable verbose mode.

--propertiesDir                         => Override the default properties file directory path, listed in "system.defaults".

--cliDir                                => Override the default cli file directory path, listed in "system.defaults".

--overrideCli				=> Override the default cli file path (NOT DIRCETORY PATH). It 'll take the cli files from 
					   this directory path irrespective of the profile specified. Though, script 'll look into
					   properties of same profile for credentials.

--debug					=> Divert execution on STDOUT.


NOTE:	Kindly update the default variables in "system.defaults" file under tools ./etc directory, if required,
	pointing to the GuavusTools directory which is formed after un zipping the tools tar ball.

EOF


}

####################################### MAIN ################################################
&GetDefaults;
my $result = GetOptions (	
			"cliDir=s" => \$cliDir,
			"propertiesDir=s" => \$propertiesDir,
			"overrideCli=s"	=>  \$destDir,
			"profile=s" => \$profile,
			"verbose" => \$verbose,
			"loglevel=s" => \$loglevel,	
			"node=s" => \$node,
			"help" => \$usage,
			"debug" => \$stdOut
		);

if($usage)
{
	&usage();
	exit;
}
if(!defined $propertiesDir)
{
	croak "Kindly specify --propertiesDir\n";
}
if(!defined $cliDir)
{
	croak "Kindly specify --cliDir\n";
}
if(!defined $profile)
{
        croak "Kindly specify --profile\n";
}

if(!defined $destDir) {
	$destDir="$cliDir/$profile";
}

if(!defined $node)
{
	#print "WARNING : No node specified, taking all in $destDir\n";
	usage();
	#opendir($Dir_Handle, $destDir) or die "Unable to open directory $destDir\n";
	#foreach (readdir($Dir_Handle))
	#{
	#	if($_ =~ m/(.*)\.cli/)
	#	{
	#		push @nodes, $1;
	#	}
	#}
}
else
{	if (!&is_valid($node)) {
		croak "\nError: Invalid IP address for the node, please try again.\n\n";
	}
	if(-f "$destDir/$node\.cli")
	{
		push @nodes, $node;
	}
	else
	{
		print "$destDir/$node\.cli not found\nSkipping...\n";
	}
}

my $hash_ref;
foreach(@nodes)
{
	my $host = $_;
	$hash_ref->{User} = $user || "admin";
	$hash_ref->{IP} = $host;
	my $ref = &Parse::parse_prop("$propertiesDir\/$profile\/$host\.prop") or die "Unable to read password\n";
	$password = $$ref{user}{admin}{password};
	$hash_ref->{Password} = $password;
	$hash_ref->{ConfigFile} = "$destDir/$host\.cli";
	$hash_ref->{Verbose} = $verbose;
	$hash_ref->{STDOUT} = $stdOut;
	#print "\n\nPerforming configuration on $host...\n";
	my $ret = BuildHosts->Build_Host($hash_ref);
	carp "\nWARNING : Configuration failed in some way for $host . See Logs for more information\n" unless $ret == 0;
	print "\n\nProcess Completed...!\n\n";
}
#print @nodes;
print "\n";
