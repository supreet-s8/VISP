#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;

my $src;
my $dest;
my $count=1;
my $tmpfile="./sshcmdkey.cli";
my $SSHCMD='ssh -q -o ConnectTimeout=5 -o UserKnownHostsFile=/dev/null -l root ';

sub check_ip {
  my $ip=shift;
  unless (($ip=~/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/) 
         && ($1<=255) && ($2<=255) && ($3<=255) && ($4<=255)) {
    return undef;
  }
  return 1;
} 

sub usage {
  print "\nThis tool lets you copy SSH keys from one host to many hosts to allow password-less key based login\n";
  print "Ssh keys will be generated on hosts that do not have an ssh key. If a public key is found, it will be used\n\n";
  print "Usage:\n\t$0 --src <SOURCE HOST> --dest <DEST HOST1>,<DEST HOST2>,..<DEST HOSTn>\n\n";
}

sub _gen_public_key {
  my $params=shift;
  unless ($params->{'host'}) { 
    return undef;
  } 
  my $cmd='/opt/tms/bin/cli -t "en" "configure terminal" "ssh client user admin identity dsa2 generate" ';
  my $res=`$SSHCMD $params->{'host'} \'$cmd\'`;
  if ($? != 0) { return undef; }
  unless ($res) { 
    print "..ok\nNow retreiving the key...\n";
    return (_get_public_key($params));
  }
  return undef;
}

sub _add_public_key {
  my $params=shift;
  unless ($params->{'host'}) { 
    return undef;
  } 
  print "Adding ssh key to host $params->{'host'}....\n";
  my $res=`$SSHCMD $params->{'host'} \$(\<$tmpfile)`;
  if ($? != 0) { return undef; } 
  unless ($res) { 
    print "..ok\n";
    return 1;
  }
  return undef;
}

sub _get_public_key {
  my $params=shift;
  unless ($params->{'host'}) { 
    return undef;
  } 
  my $cmd='/opt/tms/bin/cli -t "en" "configure terminal" ' . 
  '"internal query get - /ssh/client/username/admin/keytype/dsa2/public"';
  my @res=`$SSHCMD $params->{'host'} \'$cmd\'`;
  if ($? != 0) { return undef; }
  if (@res) {
    my $k=$res[0]; 
    $k=~s|^/ssh/client/username/admin/keytype/dsa2/public = ||;
    $k=~s| \(string\)$||;chomp $k;$k=~s/\s+$//;$k=~s/^\s+//;
    return $k; 
  }
  return undef;
}

my $res=GetOptions (
  "src=s"  => \$src,
  "dest=s" => \$dest,
);

unless ($src && $dest) {
  usage();
  exit 127;
}

print "This tool requires the root user to be enabled on all src and dst hosts.";
print "If the root user on any host is not enabled, the tool will not be able to copy the SSH keys\n";
print "Do you want to continue (y/n)? ";
my $ans=<>;
unless ($ans=~/y/i) {
  print "Quitting\n";
  exit;
}

unless (check_ip($src)) {
  die "Unknown source IP address $src, cannot continue!!\n";
} 

print "Checking if $src has a valid public key....\n";
my $clean_cmd="perl -pi.bak -e \'s/$src\.*\$\n//\' /var/home/root/.ssh/known_hosts";
my $clean_hosts_file=`$clean_cmd`;
my $src_sshkey=_get_public_key({'host'=>"$src"});
unless ($src_sshkey && $src_sshkey!~/No bindings returned/) {
  print "...not found\nTrying to generate a DSA2 key on host $src....\n";
  $src_sshkey=_gen_public_key({'host'=>"$src"});
  unless ($src_sshkey) {
    die "FAIL\n***Unknown error while generating SSH key on $src, bailing out!!\n";
  }
  print "ok\n";
}

my @hosts=split(",",$dest);
my $numhosts=$#hosts+1;
if ($src_sshkey) {
  open ("FH", ">$tmpfile") or die "Can't open file $tmpfile for writing, giving up!!\n";
  print FH "/opt/tms/bin/cli -t \'en\' \'configure terminal\' \'ssh client user admin authorized-key sshv2 ";
  print FH "\"$src_sshkey\"\'";
  close FH;
  while (@hosts) {
    print "$count of $numhosts hosts -- ";
    my $dst=pop@hosts;
    unless (check_ip($dst)) {
      print "Unknown destination IP address $dst, skipping!!\n";
      next;
    }
    my $clean_cmd="perl -pi.bak -e \'s/$dst\.*\$\n//\' /var/home/root/.ssh/known_hosts";
    my $clean_hosts_file=`$clean_cmd`;
    my $result=_add_public_key({'host'=>"$dst"});
    if (!$result) {
      print "FAIL\n***Unknown error when adding key to $dst!!\n";
    }
    $count++;
  }
#  unlink $tmpfile;
}



