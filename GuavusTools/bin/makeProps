#!/usr/bin/perl
use strict;
use lib '../lib';
use Parse;
use GenerateProperties;
use Getopt::Long;
use Carp;
my $DefaultParamsFile ="../etc/system.defaults";		# Requires the path of system defaults file # Do not Alter this variable, or Do not delete system.defaults file #
my $baseDir=&getDefaults();
my $customerInputFile="feedIn.txt";
# Setup options
#my @INCLUDE=("user.prop","snmp.prop","ntp.prop","mapReduce.prop","hostmap.prop","collector1.prop","collector2.prop","sm.prop","cluster1.prop","cluster2.prop","drbd.prop","INCLUDE_PROP","www.xxx.yyy.zzz.prop");
my $propertiesDir="$baseDir/etc/profiles";
my $cliDir="$baseDir/opt/profiles";
#my $propertiesFile=undef;
#my $applyCli=undef;
#my $dir=undef;
my $profile=undef;
#my $node=undef;
my $help=undef;
my $verbose=0;
my $output=GetOptions( #"propertiesDir:s"	=>      \$propertiesDir,
                       #"propertiesFile:s"	=>      \$propertiesFile,
		       "profile:s"		=>	\$profile,
		       #"node:s"			=>	\$node,
                       #"cliDir:s"		=>      \$cliDir,
                       #"applyCli"		=>      \$applyCli,
		       #"verbose"		=>	\$verbose,
		       "help"			=>	\$help);

if ($help) {
	&usage;
	exit;
}

sub usage {
	print <<EOF

Usage:

Provide in the following options.


--profile 		(Mandatory)	=> Name of the Distribution/Data centre directory under "profiles" directory which contains the "feedIn.txt".


EOF

}





#print "propertiesDir:$propertiesDir\npropertiesFile:$propertiesFile\ncliDir:$cliDir\n";

if ((! $profile)) {
	&usage();
	exit;
}

# Generate directories and Validate

my $fullProfile="$propertiesDir/$profile";

my $fullProperties="$fullProfile/INCLUDE_PROP";

my $feedIn="$fullProfile/$customerInputFile";

#my $fullCli="$cliDir/$profile";

# Create INCLUDE_PROP path.

if (! ((-d $fullProfile))) { 
	print "Profile path does not exists:\t$fullProfile".
	"\nCommiting Exit...!\n";
	exit;
}

if (! ((-e $feedIn))) {
	print "Customer feedIn file does not exists:\t$feedIn".
        "\nCommiting Exit...!\n";
        exit;
}

if (! ((-d $fullProperties))) {
	print "Creating full properties directory path.\n";
	system ("mkdir $fullProperties");
	if (-d $fullProperties) {
                print "$fullProperties ...Created\n";
        } else {
                print "Unable to create full properties directory path \"$fullProperties\".\nCommitting Exit...!\n";
                exit;
        }
}


my $ref=&Parse::_parse("$feedIn",$verbose);		# Provide the file path, returns the hash ref to the properties.
if (! $ref) {
	print "Error: feedIn file reference not retained.\nCommitting Exit...!\n";
	exit;
}

my ($ipHash,$filesList)=GenerateProperties->netFiles($ref);	# Provide the reference, returns the array ref with list of files and IP based hash ref.

#print "@$filesList\n";
#REF:$ipHash\n";

croak "Error:\t\"feedIn\" file does not gets computed successfully!\n\t\tContact support.\n" if (! (ref($ipHash) or  ref($filesList))) ;

# Generate IP.prop files.
print "\n"."="x13;
print " Generating properties for nodes "."="x14;
print "\n\n";
foreach my $IPs (keys %$ipHash) {
	my $validate=is_valid($IPs);
	print "Invalid IP: $IPs\nCommitting Exit...!\n\n" if (! $validate);
	exit if (! $validate);
	my $exp;
	open($exp,">$fullProfile/$IPs\.prop");
	GenerateProperties->ipProp($exp,$ipHash,$IPs);		# Generating ip.prop files.
	close $exp;

}



# Generate INCLUDE_PROP files.

print "\n"."="x14;
print " Generating INCLUDE properties "."="x15;
print "\n\n";
foreach my $val (@$filesList) {
	chomp $val;
	my $sub="";
	my $ID=undef;
	next if ($val=~/\d+.\d+.\d+.\d+/);
	#print "VAL: $val\n";
	if($val=~/^(collector)(\d)(.+)$/i) {
		$sub=$3;
		$ID=$2;
	} elsif ($val=~/^(collector)(\d)$/i) {
		$sub=$1;
		$ID=$2;
	} else {
		$sub=$val;
		$ID=undef;
	}
	#print "SUB to be called is $sub,";
	#print "\n" if (!defined $ID);
	#print "ID is $ID\n" if (defined $ID);
        my $exp;
        open($exp,">$fullProperties/$val\.prop");
        if (!defined $ID) {					# Generating INCLUDE PROP files.	
		GenerateProperties->$sub($exp,$ipHash,$ref);                
	} else {
		GenerateProperties->$sub($exp,$ipHash,$ref,$ID);
	}
        close $exp;
}




#&GenerateProperties::generateProp ($filesList);
	

# Reading system defaults.
sub getDefaults {
	my $base="";
	open (SD, "<$DefaultParamsFile") or carp "Unable to open Default params file :$DefaultParamsFile";
	while (<SD>) {
	my $tmp;
	chomp;
	next if m/^\s*$/ or m/^\s*#/;
		($tmp,$base) = split(/=/, $_) if m/baseDir/i;
	}
	return $base;
}


# IP validation
sub is_valid {
	my $IP=shift;
        chomp $IP;
        $IP=~s/\s+//g;
        return 1 if(($IP=~/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/) && ($1<=255) && ($2<=255) && ($3<=255) && ($4<=255));
        return undef;
}

